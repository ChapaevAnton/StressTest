package com.example.stresstest.benchmark.file;import android.app.Application;import com.example.stresstest.App;import com.example.stresstest.benchmark.IBenchmark;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.ArrayList;import java.util.Random;public class FilesBenchmark implements IBenchmark {    private static final int BUFFER_SIZE = 1024 * 4; // KB    private static final int FILE_SIZE = 1024 * 1024 * 64; // MB    private static final String FILE_NAME = "benchmark.dat";    private File dir;    private ArrayList<File> fileArr;    private volatile boolean shouldTestRun;    @Override    public void initialize() {        fileArr = new ArrayList<>();        dir = App.getApp().getFilesDir();        for (int i=0; i<16; i++){            fileArr.add(new File(dir, FILE_NAME+i));        }    }    @Override    public void initialize(Long size) {    }    @Override    public void warmup() {    }    @Override    public void run() {        this.initialize();        this.compute();        this.clean();    }    @Override    public void stop() {        this.shouldTestRun = false;    }    @Override    public void clean() {        for (File file: fileArr) {            if (file != null) {                file.delete();                file = null;            }        }    }    @Override    public void compute() {        this.shouldTestRun = true;        BufferedOutputStream outputStream = null;        BufferedInputStream inputStream = null;        Random rand = new Random();        byte[] buffer = new byte[BUFFER_SIZE];        //TODO clean up this spaghetti code        for (int i = 0; i < 16 && shouldTestRun; i++) {            try {                outputStream = new BufferedOutputStream(new FileOutputStream(fileArr.get(i)), BUFFER_SIZE);            } catch (Exception e) {                return;            }            for (int j = 0; j < FILE_SIZE && this.shouldTestRun; j += BUFFER_SIZE) {                rand.nextBytes(buffer);                //logger.write("ok");                try {                    outputStream.write(buffer);                } catch (Exception e) {                    return;                }            }            try {                outputStream.close();            } catch (IOException e) {            }        }        try {            inputStream = new BufferedInputStream(new FileInputStream(fileArr.get(0)), BUFFER_SIZE);            for (int j = 0; j < FILE_SIZE && this.shouldTestRun; j += BUFFER_SIZE) {                rand.nextBytes(buffer);                //logger.write("ok");                try {                    inputStream.read(buffer);                } catch (Exception e) {                    return;                }            }            try {                outputStream.close();            } catch (IOException e) {            }        } catch (FileNotFoundException e) {        }        this.shouldTestRun = false;    }}