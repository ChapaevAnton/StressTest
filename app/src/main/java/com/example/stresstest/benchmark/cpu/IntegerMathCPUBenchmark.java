package com.example.stresstest.benchmark.cpu;import com.example.stresstest.benchmark.IBenchmark;public class IntegerMathCPUBenchmark implements IBenchmark {    private Long size = Long.MAX_VALUE;    private volatile boolean shouldTestRun;    @Override    public void initialize(){        this.size = 20000000L;    }    @Override    public void initialize(Long size) {        this.size = size;    }    @Override    public void warmup(){        Long prevSize = this.size;        this.size = 1000L;        for (int i=1; i<=3; i*=10){            compute();            this.size *= 10;        }        this.size = prevSize;    }    @Override    public void run() {        this.warmup();        this.compute();    }    /**     * Does a lot of fixed point operations.     */    @Override    public void compute() {        this.shouldTestRun = true;        long result = 1L;        for (long i = 0L; i < this.size && this.shouldTestRun; i++) {            result += i / 256L;            result *= i % 3L + 1L;            result /= i % 2L + 1L;        }        this.shouldTestRun = false;    }    @Override    public void stop() {        this.shouldTestRun = false;    }    @Override    public void clean() {}}